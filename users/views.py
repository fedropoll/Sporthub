from rest_framework import viewsets, permissions, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework.permissions import IsAuthenticated, IsAdminUser, AllowAny
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth.models import User, AnonymousUser
from django.shortcuts import get_object_or_404
from django.db import IntegrityError
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from rest_framework_simplejwt.views import TokenObtainPairView
from .models import (
    UserProfile, PasswordResetCode, Trainer, Hall, Club, Ad, Review, Notification,
    ClassSchedule, Joinclub, Payment, Attendance
)
from .serializers import (
    UserSerializer, RegisterSerializer, VerifyCodeSerializer, LoginSerializer,
    UserProfileSerializer, TrainerSerializer, HallSerializer, ClubSerializer,
    AdSerializer, ReviewSerializer, NotificationSerializer, ClientDetailSerializer,
    ForgotPasswordSerializer, ResetPasswordSerializer, ClassScheduleSerializer,
    JoinclubSerializer, PaymentSerializer, AttendanceSerializer
)
from .utils import generate_and_send_code

import logging
import stripe
import datetime

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

stripe.api_key = "sk_test_51RtraO9OcwNpz5T4gdpVXRnB7HoHB5Cq7rnWEDMjNv8qb4vIlbQyhJrnHSKTtMnbTOJVOpfrohM6B7TwNdLGtyfY00fggb3hd9"


# -------------------- AUTHENTICATION VIEWS --------------------
class RegisterView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ç—ã—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        """,
        request_body=RegisterSerializer,
        responses={
            201: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', examples={'application/json': {'success': True,
                                                                                         'message': '–ù–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏, –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.',
                                                                                         'email': 'test@example.com'}}),
            400: openapi.Response('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', examples={'application/json': {'success': False, 'errors': {
                'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.']}}})
        }
    )
    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response({
                "success": True,
                "message": "–ù–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏, –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.",
                "email": user.email
            }, status=status.HTTP_201_CREATED)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class VerifyCodeView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∫–æ–¥—É",
        operation_description="""
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ email.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É JWT-—Ç–æ–∫–µ–Ω–æ–≤ (access –∏ refresh)
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å API.
        """,
        request_body=VerifyCodeSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', examples={
                'application/json': {'success': True, 'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
                                     'tokens': {'refresh': '...', 'access': '...'},
                                     'user': {'id': 1, 'email': 'test@example.com', 'first_name': '–ò–≤–∞–Ω',
                                              'last_name': '–ü–µ—Ç—Ä–æ–≤'}}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ email', examples={
                'application/json': {'success': False, 'errors': {'code': ['–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']}}})
        }
    )
    def post(self, request):
        serializer = VerifyCodeSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            refresh = RefreshToken.for_user(user)
            return Response({
                "success": True,
                "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class LoginView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã
        –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API. –ï—Å–ª–∏ —Ñ–ª–∞–≥ `remember` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω,
        —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh-—Ç–æ–∫–µ–Ω–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω.
        """,
        request_body=LoginSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', examples={
                'application/json': {'success': True, 'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                                     'tokens': {'refresh': '...', 'access': '...'},
                                     'user': {'id': 1, 'email': 'test@example.com', 'first_name': '–ò–≤–∞–Ω',
                                              'last_name': '–ü–µ—Ç—Ä–æ–≤'}}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={
                'application/json': {'success': False, 'errors': {'detail': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}}})
        }
    )
    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            remember = serializer.validated_data.get('remember', False)

            refresh = RefreshToken.for_user(user)
            if remember:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh-—Ç–æ–∫–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π
                refresh.set_exp(lifetime=datetime.timedelta(days=30))

            return Response({
                "success": True,
                "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ForgotPasswordView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
        operation_description="""
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ email, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º
        –∞–¥—Ä–µ—Å–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """,
        request_body=ForgotPasswordSerializer,
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', examples={'application/json': {'success': True,
                                                                                  'message': '–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
                                                                                  'email': 'test@example.com'}}),
            400: openapi.Response('Email –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={
                'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.']}}})
        }
    )
    def post(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            user = User.objects.get(email=email)
            generate_and_send_code(user)

            return Response({
                "success": True,
                "message": "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
                "email": email
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ResetPasswordView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
        operation_description="""
        –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è email, –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ `ForgotPasswordView`.
        """,
        request_body=ResetPasswordSerializer,
        responses={
            200: openapi.Response('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω', examples={'application/json': {'success': True,
                                                                                   'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º'}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={
                'application/json': {'success': False, 'errors': {'code': ['–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']}}})
        }
    )
    def post(self, request):
        serializer = ResetPasswordSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response({
                "success": True,
                "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º"
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ResendCodeView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        operation_description="""
        –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–µ—Ç
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–∞–∫ –∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['email'],
            properties={
                'email': openapi.Schema(type=openapi.TYPE_STRING, format='email', description='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            }
        ),
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ', examples={
                'application/json': {'success': True, 'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'}}),
            400: openapi.Response('Email –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={
                'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω']}}})
        }
    )
    def post(self, request):
        email = request.data.get('email')
        if not email:
            return Response({
                "success": False,
                "errors": {"email": ["Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
            generate_and_send_code(user)
            return Response({
                "success": True,
                "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            }, status=status.HTTP_200_OK)
        except User.DoesNotExist:
            return Response({
                "success": False,
                "errors": {"email": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)


# -------------------- RESOURCE VIEWS --------------------
class UserProfileViewSet(viewsets.ModelViewSet):
    queryset = UserProfile.objects.all()
    serializer_class = UserProfileSerializer
    permission_classes = [IsAuthenticated]
    http_method_names = ['get', 'patch', 'put']
    lookup_field = 'pk'

    def get_object(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
        """
        if self.request.user.is_authenticated and not self.request.user.is_staff:
            return get_object_or_404(UserProfile, user=self.request.user)
        return super().get_object()

    def get_permissions(self):
        """
        –†–∞–∑—Ä–µ—à–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏,
        –∞ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–π.
        """
        if self.action == 'list':
            self.permission_classes = [IsAdminUser]
        return super().get_permissions()

    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –µ–≥–æ ID.
        '''
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (—á–∞—Å—Ç–∏—á–Ω–æ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        ''',
        request_body=UserProfileSerializer
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
        operation_description='''
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ. –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        ''',
        request_body=UserProfileSerializer
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)',
        operation_description='''
        **–í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.**
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


class ClientViewSet(viewsets.ModelViewSet):
    queryset = UserProfile.objects.select_related('user').all()
    serializer_class = ClientDetailSerializer
    permission_classes = [IsAdminUser]
    http_method_names = ['get', 'delete']

    @swagger_auto_schema(
        tags=['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
        operation_description='''
        –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª–∏–µ–Ω—Ç–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª–∏–µ–Ω—Ç–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        user_instance = instance.user
        user_instance.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class HallViewSet(viewsets.ModelViewSet):
    queryset = Hall.objects.all()
    serializer_class = HallSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            return [AllowAny()]
        return [IsAdminUser()]


class ClubViewSet(viewsets.ModelViewSet):
    queryset = Club.objects.all()
    serializer_class = ClubSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            return [AllowAny()]
        return [IsAdminUser()]


class TrainerViewSet(viewsets.ModelViewSet):
    queryset = Trainer.objects.all()
    serializer_class = TrainerSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            return [AllowAny()]
        return [IsAdminUser()]


class AdViewSet(viewsets.ModelViewSet):
    queryset = Ad.objects.all()
    serializer_class = AdSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            return [AllowAny()]
        return [IsAdminUser()]


class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            return [AllowAny()]
        return [IsAuthenticated()]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class NotificationViewSet(viewsets.ModelViewSet):
    queryset = Notification.objects.all()
    serializer_class = NotificationSerializer

    def get_permissions(self):
        return [IsAuthenticated()]

    def get_queryset(self):
        return Notification.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    @action(detail=True, methods=['post'])
    def mark_as_read(self, request, pk=None):
        notification = self.get_object()
        notification.is_read = True
        notification.save()
        return Response(status=status.HTTP_200_OK)


class ClassScheduleView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        tags=['üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–Ω—è—Ç–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π', ClassScheduleSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def get(self, request):
        schedules = ClassSchedule.objects.all()
        serializer = ClassScheduleSerializer(schedules, many=True)
        return Response({"success": True, "data": serializer.data}, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        tags=['üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        operation_description="""
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        """,
        request_body=ClassScheduleSerializer,
        responses={
            201: openapi.Response('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', ClassScheduleSerializer),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={
                'application/json': {'success': False, 'errors': {'title': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def post(self, request):
        if not request.user.is_staff:
            return Response({"detail": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."},
                            status=status.HTTP_403_FORBIDDEN)
        serializer = ClassScheduleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"success": True, "data": serializer.data}, status=status.HTTP_201_CREATED)
        return Response({"success": False, "errors": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)


class JoinclubView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        tags=['üéâ –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è'],
        operation_summary="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ",
        operation_description="""
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['schedule'],
            properties={
                'schedule': openapi.Schema(type=openapi.TYPE_INTEGER, description='ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'),
                'age_group': openapi.Schema(type=openapi.TYPE_STRING,
                                            description='–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ (Adult, Teen, Child)'),
            }
        ),
        responses={
            201: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å', examples={
                'application/json': {'success': True, 'message': '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!'}}),
            400: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            409: openapi.Response('–ö–æ–Ω—Ñ–ª–∏–∫—Ç', examples={
                'application/json': {'success': False, 'message': '–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ.'}})
        }
    )
    def post(self, request):
        user_profile = get_object_or_404(UserProfile, user=request.user)
        schedule_id = request.data.get('schedule')
        age_group = request.data.get('age_group', 'Adult')

        schedule = get_object_or_404(ClassSchedule, pk=schedule_id)
        if Joinclub.objects.filter(user=user_profile, schedule=schedule).exists():
            return Response({"success": False, "message": "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ."},
                            status=status.HTTP_409_CONFLICT)

        joinclub = Joinclub.objects.create(user=user_profile, schedule=schedule, age_group=age_group)
        return Response({"success": True, "message": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!", "joinclub_id": joinclub.id},
                        status=status.HTTP_201_CREATED)


class PaymentView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        tags=['üí≥ –û–ø–ª–∞—Ç–∞'],
        operation_summary="–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É",
        operation_description="""
        –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂–Ω—ã–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Stripe –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `client_secret`.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞—ë—Ç—Å—è –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ.
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['amount', 'payment_method_id'],
            properties={
                'amount': openapi.Schema(type=openapi.TYPE_NUMBER, description='–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã'),
                'payment_method_id': openapi.Schema(type=openapi.TYPE_STRING,
                                                    description='ID –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ Stripe'),
            }
        ),
        responses={
            200: openapi.Response('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞', examples={
                'application/json': {'success': True, 'message': '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', 'payment_intent_id': 'pi_...'}
                }),
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
    )
    def post(self, request, joinclub_id):
        joinclub = get_object_or_404(Joinclub, pk=joinclub_id, user__user=request.user)
        amount = request.data.get('amount')
        payment_method_id = request.data.get('payment_method_id')

        if not all([amount, payment_method_id]):
            return Response({"success": False, "errors": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –∏ ID –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞."},
                            status=status.HTTP_400_BAD_REQUEST)

        try:
            intent = stripe.PaymentIntent.create(
                amount=int(amount),
                currency='usd',  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 'kgs' –∏–ª–∏ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É
                payment_method=payment_method_id,
                confirm=True,
                off_session=False,
            )

            Payment.objects.create(
                joinclub=joinclub,
                stripe_payment_intent_id=intent.id,
                amount=amount,
            )
            return Response({"success": True, "message": "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", "payment_intent_id": intent.id},
                            status=status.HTTP_200_OK)
        except stripe.error.StripeError as e:
            return Response({"success": False, "errors": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class AttendanceView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        tags=['‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ (`joinclub_id`).
        """,
        responses={
            200: openapi.Response('–°–≤–æ–¥–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏', examples={
                'application/json': {'success': True, 'data': {'present': 10, 'absent': 2, 'total': 12}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: '–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        }
    )
    def get(self, request, joinclub_id):
        joinclub = get_object_or_404(Joinclub, pk=joinclub_id, user__user=request.user)
        summary = joinclub.get_attendance_summary
        return Response({"success": True, "data": summary}, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        tags=['‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å'],
        operation_summary="–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å",
        operation_description="""
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        """,
        request_body=AttendanceSerializer,
        responses={
            201: openapi.Response('–ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ', AttendanceSerializer),
            400: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            403: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
        }
    )
    def post(self, request, joinclub_id):
        if not request.user.is_staff:
            return Response({"detail": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."},
                            status=status.HTTP_403_FORBIDDEN)

        joinclub = get_object_or_404(Joinclub, pk=joinclub_id)
        serializer = AttendanceSerializer(data=request.data, context={'joinclub': joinclub})
        if serializer.is_valid():
            serializer.save()
            return Response({"success": True, "data": serializer.data}, status=status.HTTP_201_CREATED)
        return Response({"success": False, "errors": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)