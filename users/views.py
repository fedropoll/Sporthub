from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth.models import User
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

from .serializers import (
    RegisterSerializer,
    VerifyCodeSerializer,
    ForgotPasswordSerializer,
    ResetPasswordSerializer
)
from .utils import generate_and_send_code

class RegisterOrLoginView(APIView):
    @swagger_auto_schema(
        tags=['üîê Authentication API'],
        operation_summary='—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        operation_description=(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
            "- –ï—Å–ª–∏ email –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π ‚Äî –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Ö–æ–¥.\n"
            "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        ),
        request_body=RegisterSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥'),
            201: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
            400: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        }
    )
    def post(self, request):
        email = request.data.get('email')
        password = request.data.get('password')
        remember = request.data.get('remember', False)

        try:
            user = User.objects.get(email=email)
            if not user.check_password(password):
                return Response({
                    "success": False,
                    "errors": {"password": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"}
                }, status=status.HTTP_400_BAD_REQUEST)

            if not user.is_active:
                generate_and_send_code(user)
                return Response({
                    "success": False,
                    "message": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –ø–æ—á—Ç—É.",
                    "email": user.email
                }, status=status.HTTP_400_BAD_REQUEST)

            refresh = RefreshToken.for_user(user)
            if remember:
                from datetime import timedelta
                refresh.set_exp(lifetime=timedelta(days=30))

            return Response({
                "success": True,
                "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)

        except User.DoesNotExist:
            serializer = RegisterSerializer(data=request.data)
            if serializer.is_valid():
                user = serializer.save()
                return Response({
                    "success": True,
                    "message": "–ù–∞ –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    "email": user.email
                }, status=status.HTTP_201_CREATED)
            return Response({
                "success": False,
                "errors": serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)


class VerifyCodeView(APIView):
    @swagger_auto_schema(
        tags=['üîê Authentication API'],
        operation_summary='–ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞',
        operation_description=(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ email. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –≤—ã–¥–∞—é—Ç—Å—è —Ç–æ–∫–µ–Ω—ã."
        ),
        request_body=VerifyCodeSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'),
            400: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
        }
    )
    def post(self, request):
        serializer = VerifyCodeSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            refresh = RefreshToken.for_user(user)

            return Response({
                "success": True,
                "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ForgotPasswordView(APIView):
    @swagger_auto_schema(
        tags=['üîê Authentication API'],
        operation_summary= '–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
        operation_description=(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email. "
            "–ö–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        ),
        request_body=ForgotPasswordSerializer,
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
            400: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    )
    def post(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            user = User.objects.get(email=email)
            generate_and_send_code(user)

            return Response({
                "success": True,
                "message": "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
                "email": email
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ResetPasswordView(APIView):
    @swagger_auto_schema(
        tags=['üîê Authentication API'],
        operation_summary='–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞',
        operation_description=(
            "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ email –∏ –∫–æ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º."
        ),
        request_body=ResetPasswordSerializer,
        responses={
            200: openapi.Response('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω'),
            400: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        }
    )
    def post(self, request):
        serializer = ResetPasswordSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()

            return Response({
                "success": True,
                "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º"
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ResendCodeView(APIView):
    @swagger_auto_schema(
        tags=['üîê Authentication API'],
        operation_summary='–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        operation_description=(
            "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email. "
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –Ω–µ –¥–æ—à—ë–ª –∏–ª–∏ –∏—Å—Ç—ë–∫."
        ),
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['email'],
            properties={
                'email': openapi.Schema(type=openapi.TYPE_STRING, format='email'),
            }
        ),
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'),
            400: 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }
    )
    def post(self, request):
        email = request.data.get('email')
        if not email:
            return Response({
                "success": False,
                "errors": {"email": ["Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
            generate_and_send_code(user)
            return Response({
                "success": True,
                "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            }, status=status.HTTP_200_OK)
        except User.DoesNotExist:
            return Response({
                "success": False,
                "errors": {"email": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

class LoginAPIView(APIView):
    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')

        try:
            user = User.objects.get(username=username)
        except User.DoesNotExist:
            return Response({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)

        if user.check_password(password):
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        else:
            return Response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'}, status=400)