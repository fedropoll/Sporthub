from rest_framework import viewsets, permissions, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth.models import User
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from django.contrib.auth.models import User, AnonymousUser
from django.shortcuts import get_object_or_404
from django.db import IntegrityError
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework_simplejwt.tokens import RefreshToken
from .models import UserProfile, ClassSchedule, Joinclub, Attendance, Payment
from .serializers import UserProfileSerializer, ClassScheduleSerializer, JoinclubSerializer, PaymentSerializer, AttendanceSerializer
import stripe
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

stripe.api_key = "sk_test_51RtraO9OcwNpz5T4gdpVXRnB7HoHB5Cq7rnWEDMjNv8qb4vIlbQyhJrnHSKTtMnbTOJVOpfrohM6B7TwNdLGtyfY00fggb3hd9"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–∞—à–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏ –º–æ–¥–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ—Ö –∂–µ –º–µ—Å—Ç–∞—Ö
from .serializers import (
    UserSerializer,
    RegisterSerializer,
    VerifyCodeSerializer,
    LoginSerializer,
    UserProfileSerializer,
    TrainerSerializer,
    HallSerializer,
    ClubSerializer,
    AdSerializer,
    ReviewSerializer,
    NotificationSerializer,
    ClientDetailSerializer,
    ForgotPasswordSerializer,
    ResetPasswordSerializer,
    VerifyCodeSerializer,
)
from .models import (
    UserProfile,
    PasswordResetCode,
    Trainer,
    Hall,
    Club,
    Ad,
    Review,
    Notification,
    ClassScheduleSerializer,
    JoinclubSerializer,
    PaymentSerializer,
    AttendanceSerializer
)
from .utils import generate_and_send_code


class RegisterView(viewsets.ViewSet):
    serializer_class = RegisterSerializer
    permission_classes = [permissions.AllowAny]

class RegisterView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ç—ã—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        """,
        request_body=RegisterSerializer,
        responses={
            201: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', examples={'application/json': {'success': True, 'message': '–ù–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏, –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.', 'email': 'test@example.com'}}),
            400: openapi.Response('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', examples={'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.']}}})
        }
        tags=['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
        operation_summary='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        operation_description='''
        –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å `email`, `password`, `confirmPassword`, `firstName`, `lastName`, `phone_number`, `birth_date`.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email.
        –ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –∏ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.
        ''',
        request_body=RegisterSerializer
    )
    def create(self, request):
        serializer = self.serializer_class(data=request.data)
    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        if serializer.is_valid():
            try:
                user = serializer.save()
                return Response(
                    {"detail": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ù–∞ –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."},
                    status=status.HTTP_201_CREATED,
                )
            except IntegrityError:
                return Response(
                    {"email": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."]},
                    status=status.HTTP_400_BAD_REQUEST,
                )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
            user = serializer.save()
            return Response({
                "success": True,
                "message": "–ù–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏, –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.",
                "email": user.email
            }, status=status.HTTP_201_CREATED)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class VerifyCodeView(viewsets.ViewSet):
    serializer_class = VerifyCodeSerializer
    permission_classes = [permissions.AllowAny]

class VerifyCodeView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∫–æ–¥—É",
        operation_description="""
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ email.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É JWT-—Ç–æ–∫–µ–Ω–æ–≤ (access –∏ refresh)
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å API.
        """,
        request_body=VerifyCodeSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', examples={'application/json': {'success': True, 'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'tokens': {'refresh': '...', 'access': '...'}, 'user': {'id': 1, 'email': 'test@example.com', 'first_name': '–ò–≤–∞–Ω', 'last_name': '–ü–µ—Ç—Ä–æ–≤'}}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ email', examples={'application/json': {'success': False, 'errors': {'code': ['–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']}}})
        }
        tags=['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
        operation_summary='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
        operation_description='''
        –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å `email` –∏ `code` (4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—á—Ç—É).
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.
        ''',
        request_body=VerifyCodeSerializer
    )
    def create(self, request):
        serializer = self.serializer_class(data=request.data)
    def post(self, request):
        serializer = VerifyCodeSerializer(data=request.data)
        if serializer.is_valid():
            return Response(
                {"detail": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"},
                status=status.HTTP_200_OK
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class LoginView(TokenObtainPairView):
    serializer_class = LoginSerializer
    permission_classes = [permissions.AllowAny]

    @swagger_auto_schema(
        tags=['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
        operation_summary='–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
        operation_description='''
        –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å `email` –∏ `password`.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ (access –∏ refresh) –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        ''',
        request_body=LoginSerializer
    )
    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        try:
            serializer.is_valid(raise_exception=True)
        except Exception as e:
            return Response(
                {'detail': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )
        user = serializer.validated_data['user']
        refresh = RefreshToken.for_user(user)
        return Response(
            {
                "refresh": str(refresh),
                "access": str(refresh.access_token),
                "user": UserSerializer(user).data
            },
            status=status.HTTP_200_OK
        )

            user = serializer.validated_data['user']
            refresh = RefreshToken.for_user(user)

            return Response({
                "success": True,
                "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

class UserProfileViewSet(viewsets.ModelViewSet):
    queryset = UserProfile.objects.all()
    serializer_class = UserProfileSerializer
    permission_classes = [permissions.IsAuthenticated]
    http_method_names = ['get', 'patch', 'put']
    lookup_field = 'pk'

    def get_object(self):
        return self.request.user.userprofile

    def get_queryset(self):
        if isinstance(self.request.user, AnonymousUser):
            return UserProfile.objects.none()
        if self.action in ['retrieve', 'update', 'partial_update']:
            return UserProfile.objects.filter(user=self.request.user)
        return UserProfile.objects.all()

class LoginView(APIView):
    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è'
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã
        –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API. –ï—Å–ª–∏ —Ñ–ª–∞–≥ `remember` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω,
        —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh-—Ç–æ–∫–µ–Ω–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω.
        """,
        request_body=LoginSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', examples={'application/json': {'success': True, 'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'tokens': {'refresh': '...', 'access': '...'}, 'user': {'id': 1, 'email': 'test@example.com', 'first_name': '–ò–≤–∞–Ω', 'last_name': '–ü–µ—Ç—Ä–æ–≤'}}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'detail': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}}})
        }
    )
    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response(serializer.data)
    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            remember = serializer.validated_data.get('remember', False)

            refresh = RefreshToken.for_user(user)

            if remember:
                refresh.set_exp(lifetime=refresh.lifetime * 30)

            return Response({
                "success": True,
                "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ForgotPasswordView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
        operation_description="""
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ email, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º
        –∞–¥—Ä–µ—Å–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """,
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (—á–∞—Å—Ç–∏—á–Ω–æ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å `first_name`, `last_name`, `email`, `phone_number`, `birth_date`, `gender`, `address`.
        ''',
        request_body=UserProfileSerializer
    )
    def partial_update(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
        request_body=UserProfileSerializer
    )
    def update(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        tags=['üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)',
        operation_description='''
        **–í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.**
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    def get_permissions(self):
        if self.action == 'list':
            self.permission_classes = [permissions.IsAdminUser]
        return super().get_permissions()


class PasswordResetView(viewsets.ViewSet):
    @swagger_auto_schema(
        tags=['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
        operation_summary='–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
        request_body=ForgotPasswordSerializer,
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', examples={'application/json': {'success': True, 'message': '–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã', 'email': 'test@example.com'}}),
            400: openapi.Response('Email –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.']}}})
        }
        operation_description='''
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
        –ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π `email` –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.
        '''
    )
    def post(self, request):
    @action(detail=False, methods=['post'], url_path='request')
    def request_reset(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            user = User.objects.get(email=email)
            generate_and_send_code(user)

            return Response({
                "success": True,
                "message": "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
                "email": email
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)
        if serializer.is_valid(raise_exception=True):
            user = get_object_or_404(User, email=serializer.validated_data['email'])
            code = PasswordResetCode.generate_code()
            PasswordResetCode.objects.create(user=user, code=code)
            return Response({'detail': '–ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ResetPasswordView(APIView):
    @swagger_auto_schema(
        tags=['üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
        operation_summary='–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞',
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
        operation_description="""
        –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è email, –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ `ForgotPasswordView`.
        """,
        request_body=ResetPasswordSerializer,
        operation_description='''
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è `email`, `code` (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ –ø–æ—á—Ç–µ) –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.
        '''
        responses={
            200: openapi.Response('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω', examples={'application/json': {'success': True, 'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º'}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'code': ['–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']}}})
        }
    )
    @action(detail=False, methods=['post'], url_path='confirm')
    def confirm_reset(self, request):
    def post(self, request):
        serializer = ResetPasswordSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response({'detail': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ClientViewSet(viewsets.ModelViewSet):
    queryset = UserProfile.objects.select_related('user').all()
    serializer_class = ClientDetailSerializer
    permission_classes = [permissions.IsAdminUser]
    http_method_names = ['get', 'delete']

    @swagger_auto_schema(
        tags=['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
        operation_description='''
        –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª–∏–µ–Ω—Ç–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–ª–∏–µ–Ω—Ç—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª–∏–µ–Ω—Ç–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        user_instance = instance.user
        user_instance.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class HallViewSet(viewsets.ModelViewSet):
    queryset = Hall.objects.all()
    serializer_class = HallSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            self.permission_classes = [permissions.AllowAny]
        else:
            self.permission_classes = [permissions.IsAdminUser]
        return super().get_permissions()

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ª–æ–≤',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∑–∞–ª–æ–≤. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ª',
        operation_description='''
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=HallSerializer
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

            return Response({
                "success": True,
                "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º"
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)
    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ª–∞',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–ª–µ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∑–∞–ª–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ª (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=HallSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∑–∞–ª–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ª (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ª–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=HallSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∑–∞–ª–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –∑–∞–ª',
        operation_description='''
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ª –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∑–∞–ª–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)


class ClubViewSet(viewsets.ModelViewSet):
    queryset = Club.objects.all()
    serializer_class = ClubSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            self.permission_classes = [permissions.AllowAny]
        else:
            self.permission_classes = [permissions.IsAdminUser]
        return super().get_permissions()

    @swagger_auto_schema(
        tags=['ü§∏‚Äç‚ôÇÔ∏è –ö–ª—É–±—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—É–±–æ–≤',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∫–ª—É–±–æ–≤. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['ü§∏‚Äç‚ôÇÔ∏è –ö–ª—É–±—ã'],
        operation_summary='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—É–±',
        operation_description='''
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=ClubSerializer
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['ü§∏‚Äç‚ôÇÔ∏è –ö–ª—É–±—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–ª—É–±–∞',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª—É–±–µ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª—É–±–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

class ResendCodeView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        operation_description="""
        –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–µ—Ç
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–∞–∫ –∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['email'],
            properties={
                'email': openapi.Schema(type=openapi.TYPE_STRING, format='email', description='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            }
        ),
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ', examples={'application/json': {'success': True, 'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'}}),
            400: openapi.Response('Email –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω']}}})
        }
        tags=['ü§∏‚Äç‚ôÇÔ∏è –ö–ª—É–±—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—É–± (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=ClubSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª—É–±–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def post(self, request):
        email = request.data.get('email')
        if not email:
            return Response({
                "success": False,
                "errors": {"email": ["Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
            generate_and_send_code(user)
            return Response({
                "success": True,
                "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            }, status=status.HTTP_200_OK)
        except User.DoesNotExist:
            return Response({
                "success": False,
                "errors": {"email": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

class UserProfileView(APIView):
    permission_classes = [IsAuthenticated]
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['ü§∏‚Äç‚ôÇÔ∏è –ö–ª—É–±—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—É–± (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=ClubSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª—É–±–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (UserProfile) —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        responses={
            200: openapi.Response('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è', UserProfileSerializer),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)
    def get(self, request):
        try:
            user_profile = UserProfile.objects.get(user=request.user)
            serializer = UserProfileSerializer(user_profile)
            return Response({
                'success': True,
                'data': serializer.data
            }, status=status.HTTP_200_OK)
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

    @swagger_auto_schema(
        tags=['ü§∏‚Äç‚ôÇÔ∏è –ö–ª—É–±—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –∫–ª—É–±',
        operation_description='''
        –£–¥–∞–ª—è–µ—Ç –∫–ª—É–± –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –∫–ª—É–±–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (UserProfile) —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `partial=True`, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è.
        –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        request_body=UserProfileSerializer,
        responses={
            200: openapi.Response('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è', UserProfileSerializer),
            400: openapi.Response('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', examples={'application/json': {'success': False, 'errors': {'phone_number': ['–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)


class TrainerViewSet(viewsets.ModelViewSet):
    queryset = Trainer.objects.all()
    serializer_class = TrainerSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            self.permission_classes = [permissions.AllowAny]
        else:
            self.permission_classes = [permissions.IsAdminUser]
        return super().get_permissions()
    def put(self, request):
        try:
            user_profile = UserProfile.objects.get(user=request.user)
            serializer = UserProfileSerializer(user_profile, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response({
                    'success': True,
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
                    'data': serializer.data
                }, status=status.HTTP_200_OK)
            return Response({
                'success': False,
                'errors': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

class ClassScheduleView(APIView):
    permission_classes = [IsAuthenticated]
    @swagger_auto_schema(
        tags=['üí™ –¢—Ä–µ–Ω–µ—Ä—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        '''
    tags=['üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
    operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
    operation_description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–Ω—è—Ç–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π', ClassScheduleSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    def get(self, request):
        schedules = ClassSchedule.objects.all()
        serializer = ClassScheduleSerializer(schedules, many=True)
        return Response({"success": True, "data": serializer.data}, status=status.HTTP_200_OK)
    @swagger_auto_schema(
        tags=['üí™ –¢—Ä–µ–Ω–µ—Ä—ã'],
        operation_summary='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞',
        operation_description='''
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=TrainerSerializer
    tags=['üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
    operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    operation_description="""
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏,
    –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ö–æ—Ç—è –≤ –∫–æ–¥–µ —ç—Ç–æ —è–≤–Ω–æ
    –Ω–µ —É–∫–∞–∑–∞–Ω–æ).
    """,
        request_body=ClassScheduleSerializer,
        responses={
            201: openapi.Response('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', ClassScheduleSerializer),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'title': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)
    def post(self, request):
        serializer = ClassScheduleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"success": True, "message": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ", "data": serializer.data}, status=status.HTTP_201_CREATED)
        return Response({"success": False, "errors": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

class JoinclubView(APIView):
    permission_classes = [IsAuthenticated]
    @swagger_auto_schema(
        tags=['üí™ –¢—Ä–µ–Ω–µ—Ä—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—Ä–µ–Ω–µ—Ä–µ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID —Ç—Ä–µ–Ω–µ—Ä–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—Ä—É–∂–∫–∏",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä—É–∂–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π', JoinclubSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', examples={'application/json': {'success': False, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)
    def get(self, request):
        try:
            user_profile = request.user.userprofile
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

        joinclubs = Joinclub.objects.filter(user=user_profile)
        serializer = JoinclubSerializer(joinclubs, many=True)
        return Response({
            'success': True,
            'data': serializer.data
        }, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        tags=['üí™ –¢—Ä–µ–Ω–µ—Ä—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=TrainerSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID —Ç—Ä–µ–Ω–µ—Ä–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫'],
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –∫—Ä—É–∂–æ–∫",
        operation_description="""
        –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞
        –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        request_body=JoinclubSerializer,
        responses={
            201: openapi.Response('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞', JoinclubSerializer),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', examples={'application/json': {'success': False, 'message': '–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫—Ä—É–∂–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def post(self, request):
        user_profile = request.user.userprofile
        serializer = JoinclubSerializer(data=request.data, context={'user': user_profile})
        if serializer.is_valid():
            schedule_id = request.data.get('schedule')
            if Joinclub.objects.filter(user=user_profile, schedule_id=schedule_id).exists():
                return Response({
                    'success': False,
                    'message': '–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫—Ä—É–∂–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                }, status=status.HTTP_400_BAD_REQUEST)
            serializer.save(user=user_profile)
            return Response({
                'success': True,
                'message': '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                'data': serializer.data
            }, status=status.HTTP_201_CREATED)
        return Response({
            'success': False,
            'errors': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)




class PaymentView(APIView):
    permission_classes = [IsAuthenticated]
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üí™ –¢—Ä–µ–Ω–µ—Ä—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=TrainerSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID —Ç—Ä–µ–Ω–µ—Ä–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['üí≥–û–ø–ª–∞—Ç–∞'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏",
        operation_description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–ª–∞—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é –Ω–∞ –∫—Ä—É–∂–æ–∫ (`joinclub`). –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º `joinclub`.",
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç', PaymentSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'message': 'Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)
    def get(self, request, joinclub_id):
        try:
            joinclub_instance = Joinclub.objects.get(id=joinclub_id, user=request.user.userprofile)
            payments = Payment.objects.filter(joinclub=joinclub_instance)
            serializer = PaymentSerializer(payments, many=True)
            return Response({
                'success': True,
                'data': serializer.data
            }, status=status.HTTP_200_OK)
        except Joinclub.DoesNotExist:
            return Response({
                'success': False,
                'message': 'Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

    @swagger_auto_schema(
        tags=['üí™ –¢—Ä–µ–Ω–µ—Ä—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞',
        operation_description='''
        –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID —Ç—Ä–µ–Ω–µ—Ä–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['üí≥–û–ø–ª–∞—Ç–∞'],
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–ª–∞—Ç—É",
        operation_description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—Ä—É–∂–æ–∫ (`joinclub`). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Stripe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º `joinclub`.",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['amount', 'stripe_token'],
            properties={
                'amount': openapi.Schema(type=openapi.TYPE_NUMBER, description='–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤ –≤–∞–ª—é—Ç–µ'),
                'currency': openapi.Schema(type=openapi.TYPE_STRING, description='–í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USD)', default='usd'),
                'stripe_token': openapi.Schema(type=openapi.TYPE_STRING, description='–¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã –æ—Ç Stripe.js'),
            }
        ),
        responses={
            201: openapi.Response('–û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞', examples={'application/json': {'success': True, 'message': '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞', 'data': {'id': 1, 'amount': '100.00'}, 'clientSecret': '...'}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'amount': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', examples={'application/json': {'success': False, 'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}})
        }
    )
    def post(self, request, joinclub_id):
        logger.debug("Received data: %s", request.data)
        try:
            joinclub_instance = Joinclub.objects.get(id=joinclub_id, user=request.user.userprofile)
            amount = request.data.get('amount')
            currency = request.data.get('currency', 'usd')
            stripe_token = request.data.get('stripe_token')

            if not amount or not stripe_token:
                return Response({
                    'success': False,
                    'errors': {'amount': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'], 'stripe_token': ['–¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω']}
                }, status=status.HTTP_400_BAD_REQUEST)
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            try:
                amount_float = float(amount)
                if amount_float <= 0:
                    return Response({
                        'success': False,
                        'errors': {'amount': ['–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π']}
                    }, status=status.HTTP_400_BAD_REQUEST)
            except (ValueError, TypeError):
                return Response({
                    'success': False,
                    'errors': {'amount': ['–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º']}
                }, status=status.HTTP_400_BAD_REQUEST)

class AdViewSet(viewsets.ModelViewSet):
    queryset = Ad.objects.all()
    serializer_class = AdSerializer
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stripe
            intent = stripe.PaymentIntent.create(
                amount=int(amount_float * 100),  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—ã
                currency=currency,
                payment_method_data={
                    "type": "card",
                    "card": {
                        "token": stripe_token
                    }
                },
                confirmation_method='manual',
                confirm=True,
                description=f"–û–ø–ª–∞—Ç–∞ –∑–∞ {joinclub_instance.schedule.title}",
                return_url="http://127.0.0.1:8000/swagger/"
            )

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            self.permission_classes = [permissions.AllowAny]
        else:
            self.permission_classes = [permissions.IsAdminUser]
        return super().get_permissions()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            if intent.status == 'succeeded':
                payment_data = {
                    'joinclub': joinclub_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
                    'amount': amount_float,
                    'stripe_payment_intent_id': intent.id
                }
                serializer = PaymentSerializer(data=payment_data)
                if serializer.is_valid():
                    payment = serializer.save()
                    return Response({
                        'success': True,
                        'message': '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                        'data': serializer.data,
                        'clientSecret': intent.client_secret
                    }, status=status.HTTP_201_CREATED)
                return Response({
                    'success': False,
                    'errors': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            else:
                return Response({
                    'success': False,
                    'message': f'–ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: {intent.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                }, status=status.HTTP_400_BAD_REQUEST)
        except Joinclub.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_404_NOT_FOUND)
        except stripe.error.StripeError as e:
            logger.error("Stripe error: %s", str(e))
            return Response({
                'success': False,
                'errors': {'stripe': [str(e)]}
            }, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error("Unexpected error: %s", str(e))
            return Response({
                'success': False,
                'errors': {'general': ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ']}
            }, status=status.HTTP_400_BAD_REQUEST)

class AttendanceView(APIView):
    permission_classes = [IsAuthenticated]
    @swagger_auto_schema(
        tags=['üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è'],
        operation_summary='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
        operation_description='''
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=AdSerializer
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=AdSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", type=openapi.TYPE_INTEGER)
        ]
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=AdSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", type=openapi.TYPE_INTEGER)
        ]
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üì£ –û–±—ä—è–≤–ª–µ–Ω–∏—è'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
        operation_description='''
        –£–¥–∞–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", type=openapi.TYPE_INTEGER)
        ]
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)


class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer

    def get_permissions(self):
        if self.action == 'create':
            self.permission_classes = [permissions.IsAuthenticated]
        elif self.action in ['list', 'destroy']:
            self.permission_classes = [permissions.IsAdminUser]
        elif self.action == 'retrieve':
            self.permission_classes = [permissions.AllowAny]
        else:
            self.permission_classes = [permissions.IsAdminUser]
        return super().get_permissions()

    @swagger_auto_schema(
        tags=['üí¨ –û—Ç–∑—ã–≤—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üí¨ –û—Ç–∑—ã–≤—ã'],
        operation_summary='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤',
        operation_description='''
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        ''',
        request_body=ReviewSerializer
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üí¨ –û—Ç–∑—ã–≤—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ç–∑—ã–≤–µ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ—Ç–∑—ã–≤–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üí¨ –û—Ç–∑—ã–≤—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=ReviewSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ—Ç–∑—ã–≤–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üí¨ –û—Ç–∑—ã–≤—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        operation_description='''
        –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        request_body=ReviewSerializer,
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ—Ç–∑—ã–≤–∞", type=openapi.TYPE_INTEGER)
        ]
        tags=['üìäC–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏ —Å–≤–æ–¥–∫—É",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—Ä—É–∂–æ–∫ (`joinclub`).
        –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–π, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ).
        –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º `joinclub`.
        """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏', AttendanceSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', examples={'application/json': {'success': False, 'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}})
        }
    )
    def get(self, request, joinclub_id):
        try:
            joinclub_instance = Joinclub.objects.get(id=joinclub_id, user=request.user.userprofile)
            attendances = Attendance.objects.filter(joinclub=joinclub_instance)
            serializer = AttendanceSerializer(attendances, many=True)
            summary = attendances.first().get_attendance_summary if attendances.exists() else {'present': 0, 'absent': 0, 'total': 0}
            return Response({
                'success': True,
                'data': serializer.data,
                'summary': {
                    'present_count': summary['present'],
                    'absent_count': summary['absent'],
                    'total_count': summary['total']
                }
            }, status=status.HTTP_200_OK)
        except Joinclub.DoesNotExist:
            return Response({'success': False, 'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=status.HTTP_404_NOT_FOUND)
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üí¨ –û—Ç–∑—ã–≤—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤',
        operation_description='''
        –£–¥–∞–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID –æ—Ç–∑—ã–≤–∞", type=openapi.TYPE_INTEGER)
        ]
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)


class NotificationViewSet(viewsets.ModelViewSet):
    queryset = Notification.objects.all()
    serializer_class = NotificationSerializer
    permission_classes = [permissions.IsAdminUser]
    http_method_names = ['get', 'delete']

    @swagger_auto_schema(
        tags=['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        '''
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        operation_description='''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", type=openapi.TYPE_INTEGER)
        ]
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        operation_description='''
        –£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        ''',
        manual_parameters=[
            openapi.Parameter('pk', openapi.IN_PATH, description="ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", type=openapi.TYPE_INTEGER)
        ]
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)