from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth.models import User
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import UserProfile, ClassSchedule, Joinclub, Attendance, Payment
from .serializers import UserProfileSerializer, ClassScheduleSerializer, JoinclubSerializer, PaymentSerializer, AttendanceSerializer
import stripe

from .serializers import (
    RegisterSerializer,
    VerifyCodeSerializer,
    LoginSerializer,
    ForgotPasswordSerializer,
    ResetPasswordSerializer,
    ClassScheduleSerializer,
    JoinclubSerializer,
    PaymentSerializer,
    AttendanceSerializer
)
from .utils import generate_and_send_code


class RegisterView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ç—ã—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        """,
        request_body=RegisterSerializer,
        responses={
            201: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', examples={'application/json': {'success': True, 'message': '–ù–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏, –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.', 'email': 'test@example.com'}}),
            400: openapi.Response('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', examples={'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.']}}})
        }
    )
    def post(self, request):
        serializer = RegisterSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response({
                "success": True,
                "message": "–ù–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏, –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.",
                "email": user.email
            }, status=status.HTTP_201_CREATED)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class VerifyCodeView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∫–æ–¥—É",
        operation_description="""
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ email.
        –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É JWT-—Ç–æ–∫–µ–Ω–æ–≤ (access –∏ refresh)
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å API.
        """,
        request_body=VerifyCodeSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', examples={'application/json': {'success': True, 'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'tokens': {'refresh': '...', 'access': '...'}, 'user': {'id': 1, 'email': 'test@example.com', 'first_name': '–ò–≤–∞–Ω', 'last_name': '–ü–µ—Ç—Ä–æ–≤'}}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ email', examples={'application/json': {'success': False, 'errors': {'code': ['–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']}}})
        }
    )
    def post(self, request):
        serializer = VerifyCodeSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            refresh = RefreshToken.for_user(user)

            return Response({
                "success": True,
                "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class LoginView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã
        –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API. –ï—Å–ª–∏ —Ñ–ª–∞–≥ `remember` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω,
        —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è refresh-—Ç–æ–∫–µ–Ω–∞ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω.
        """,
        request_body=LoginSerializer,
        responses={
            200: openapi.Response('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', examples={'application/json': {'success': True, 'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'tokens': {'refresh': '...', 'access': '...'}, 'user': {'id': 1, 'email': 'test@example.com', 'first_name': '–ò–≤–∞–Ω', 'last_name': '–ü–µ—Ç—Ä–æ–≤'}}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'detail': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}}})
        }
    )
    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            remember = serializer.validated_data.get('remember', False)

            refresh = RefreshToken.for_user(user)

            if remember:
                refresh.set_exp(lifetime=refresh.lifetime * 30)

            return Response({
                "success": True,
                "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "user": {
                    "id": user.id,
                    "email": user.email,
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ForgotPasswordView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
        operation_description="""
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ email, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º
        –∞–¥—Ä–µ—Å–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """,
        request_body=ForgotPasswordSerializer,
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', examples={'application/json': {'success': True, 'message': '–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã', 'email': 'test@example.com'}}),
            400: openapi.Response('Email –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.']}}})
        }
    )
    def post(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            user = User.objects.get(email=email)
            generate_and_send_code(user)

            return Response({
                "success": True,
                "message": "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
                "email": email
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ResetPasswordView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
        operation_description="""
        –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è email, –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ `ForgotPasswordView`.
        """,
        request_body=ResetPasswordSerializer,
        responses={
            200: openapi.Response('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω', examples={'application/json': {'success': True, 'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º'}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'code': ['–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']}}})
        }
    )
    def post(self, request):
        serializer = ResetPasswordSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()

            return Response({
                "success": True,
                "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º"
            }, status=status.HTTP_200_OK)
        return Response({
            "success": False,
            "errors": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class ResendCodeView(APIView):
    @swagger_auto_schema(
        tags=["üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        operation_summary="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        operation_description="""
        –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–µ—Ç
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–∞–∫ –∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
        """,
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['email'],
            properties={
                'email': openapi.Schema(type=openapi.TYPE_STRING, format='email', description='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            }
        ),
        responses={
            200: openapi.Response('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ', examples={'application/json': {'success': True, 'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'}}),
            400: openapi.Response('Email –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'errors': {'email': ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω']}}})
        }
    )
    def post(self, request):
        email = request.data.get('email')
        if not email:
            return Response({
                "success": False,
                "errors": {"email": ["Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
            generate_and_send_code(user)
            return Response({
                "success": True,
                "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            }, status=status.HTTP_200_OK)
        except User.DoesNotExist:
            return Response({
                "success": False,
                "errors": {"email": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"]}
            }, status=status.HTTP_400_BAD_REQUEST)

class UserProfileView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        tags=['üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (UserProfile) —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        responses={
            200: openapi.Response('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è', UserProfileSerializer),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def get(self, request):
        try:
            user_profile = UserProfile.objects.get(user=request.user)
            serializer = UserProfileSerializer(user_profile)
            return Response({
                'success': True,
                'data': serializer.data
            }, status=status.HTTP_200_OK)
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

    @swagger_auto_schema(
        tags=['üë§–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        operation_summary="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="""
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (UserProfile) —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `partial=True`, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è.
        –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        request_body=UserProfileSerializer,
        responses={
            200: openapi.Response('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è', UserProfileSerializer),
            400: openapi.Response('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', examples={'application/json': {'success': False, 'errors': {'phone_number': ['–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def put(self, request):
        try:
            user_profile = UserProfile.objects.get(user=request.user)
            serializer = UserProfileSerializer(user_profile, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response({
                    'success': True,
                    'message': '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
                    'data': serializer.data
                }, status=status.HTTP_200_OK)
            return Response({
                'success': False,
                'errors': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

class ClassScheduleView(APIView):
    permission_classes = [IsAuthenticated]
    @swagger_auto_schema(
    tags=['üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
    operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
    operation_description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–Ω—è—Ç–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
    """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π', ClassScheduleSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def get(self, request):
        schedules = ClassSchedule.objects.all()
        serializer = ClassScheduleSerializer(schedules, many=True)
        return Response({"success": True, "data": serializer.data}, status=status.HTTP_200_OK)
    @swagger_auto_schema(
    tags=['üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
    operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    operation_description="""
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏,
    –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ö–æ—Ç—è –≤ –∫–æ–¥–µ —ç—Ç–æ —è–≤–Ω–æ
    –Ω–µ —É–∫–∞–∑–∞–Ω–æ).
    """,
        request_body=ClassScheduleSerializer,
        responses={
            201: openapi.Response('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', ClassScheduleSerializer),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'title': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def post(self, request):
        serializer = ClassScheduleSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"success": True, "message": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ", "data": serializer.data}, status=status.HTTP_201_CREATED)
        return Response({"success": False, "errors": serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

class JoinclubView(APIView):
    permission_classes = [IsAuthenticated]
    @swagger_auto_schema(
        tags=['‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—Ä—É–∂–∫–∏",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä—É–∂–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—É—â–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π', JoinclubSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', examples={'application/json': {'success': False, 'message': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def get(self, request):
        try:
            user_profile = request.user.userprofile
        except UserProfile.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

        joinclubs = Joinclub.objects.filter(user=user_profile)
        serializer = JoinclubSerializer(joinclubs, many=True)
        return Response({
            'success': True,
            'data': serializer.data
        }, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        tags=['‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫'],
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –∫—Ä—É–∂–æ–∫",
        operation_description="""
        –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞
        –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """,
        request_body=JoinclubSerializer,
        responses={
            201: openapi.Response('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞', JoinclubSerializer),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', examples={'application/json': {'success': False, 'message': '–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫—Ä—É–∂–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        }
    )
    def post(self, request):
        user_profile = request.user.userprofile
        serializer = JoinclubSerializer(data=request.data, context={'user': user_profile})
        if serializer.is_valid():
            schedule_id = request.data.get('schedule')
            if Joinclub.objects.filter(user=user_profile, schedule_id=schedule_id).exists():
                return Response({
                    'success': False,
                    'message': '–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫—Ä—É–∂–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                }, status=status.HTTP_400_BAD_REQUEST)
            serializer.save(user=user_profile)
            return Response({
                'success': True,
                'message': '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                'data': serializer.data
            }, status=status.HTTP_201_CREATED)
        return Response({
            'success': False,
            'errors': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

stripe.api_key = "here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

class PaymentView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        tags=['üí≥–û–ø–ª–∞—Ç–∞'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏",
        operation_description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–ª–∞—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é –Ω–∞ –∫—Ä—É–∂–æ–∫ (`joinclub`). –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º `joinclub`.",
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç', PaymentSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω', examples={'application/json': {'success': False, 'message': 'Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω'}})
        }
    )
    def get(self, request, joinclub_id):
        try:
            joinclub_instance = Joinclub.objects.get(id=joinclub_id, user=request.user.userprofile)
            payments = Payment.objects.filter(joinclub=joinclub_instance)
            serializer = PaymentSerializer(payments, many=True)
            return Response({
                'success': True,
                'data': serializer.data
            }, status=status.HTTP_200_OK)
        except Joinclub.DoesNotExist:
            return Response({
                'success': False,
                'message': 'Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)

    @swagger_auto_schema(
        tags=['üí≥–û–ø–ª–∞—Ç–∞'],
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–ª–∞—Ç—É",
        operation_description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—Ä—É–∂–æ–∫ (`joinclub`). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Stripe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º `joinclub`.",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['amount', 'stripe_token'],
            properties={
                'amount': openapi.Schema(type=openapi.TYPE_NUMBER, description='–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤ –≤–∞–ª—é—Ç–µ'),
                'currency': openapi.Schema(type=openapi.TYPE_STRING, description='–í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USD)', default='usd'),
                'stripe_token': openapi.Schema(type=openapi.TYPE_STRING, description='–¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã –æ—Ç Stripe.js'),
            }
        ),
        responses={
            201: openapi.Response('–û–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞', examples={'application/json': {'success': True, 'message': '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞', 'data': {'id': 1, 'amount': '100.00'}, 'clientSecret': '...'}}),
            400: openapi.Response('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', examples={'application/json': {'success': False, 'errors': {'amount': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.']}}}),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', examples={'application/json': {'success': False, 'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}})
        }
    )
    def post(self, request, joinclub_id):
        try:
            joinclub_instance = Joinclub.objects.get(id=joinclub_id, user=request.user.userprofile)
            amount = request.data.get('amount')
            currency = request.data.get('currency', 'usd')
            stripe_token = request.data.get('stripe_token')

            if not amount or not stripe_token:
                return Response({
                    'success': False,
                    'errors': {'amount': ['–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'], 'stripe_token': ['–¢–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω']}
                }, status=status.HTTP_400_BAD_REQUEST)

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stripe
            intent = stripe.PaymentIntent.create(
                amount=int(float(amount) * 100),  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—ã
                currency=currency,
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ payment_method_data
                payment_method_data={
                    "type": "card",
                    "card": {
                        "token": stripe_token
                    }
                },
                confirmation_method='manual',
                confirm=True,
                description=f"–û–ø–ª–∞—Ç–∞ –∑–∞ {joinclub_instance.schedule.title}"
            )

            # ---> –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º <---
            automatic_payment_methods = {
                "enabled": True,
                "allow_redirects": "never"
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ –±–∞–∑–µ
            payment_data = {
                'joinclub': joinclub_instance,
                'amount': amount,
                'stripe_payment_intent_id': intent.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            }
            serializer = PaymentSerializer(data=payment_data)
            if serializer.is_valid():
                payment = serializer.save()
                return Response({
                    'success': True,
                    'message': '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞',
                    'data': serializer.data,
                    'clientSecret': intent.client_secret
                }, status=status.HTTP_201_CREATED)
            return Response({
                'success': False,
                'errors': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)
        except Joinclub.DoesNotExist:
            return Response({
                'success': False,
                'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }, status=status.HTTP_404_NOT_FOUND)
        except stripe.error.StripeError as e:
            return Response({
                'success': False,
                'errors': {'stripe': [str(e)]}
            }, status=status.HTTP_400_BAD_REQUEST)

class AttendanceView(APIView):
    permission_classes = [IsAuthenticated]
    @swagger_auto_schema(
        tags=['üìäC–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'],
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏ —Å–≤–æ–¥–∫—É",
        operation_description="""
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—Ä—É–∂–æ–∫ (`joinclub`).
        –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–π, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–π –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ).
        –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º `joinclub`.
        """,
        responses={
            200: openapi.Response('–°–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏', AttendanceSerializer(many=True)),
            401: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
            404: openapi.Response('–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', examples={'application/json': {'success': False, 'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}})
        }
    )
    def get(self, request, joinclub_id):
        try:
            joinclub_instance = Joinclub.objects.get(id=joinclub_id, user=request.user.userprofile)
            attendances = Attendance.objects.filter(joinclub=joinclub_instance)
            serializer = AttendanceSerializer(attendances, many=True)
            summary = attendances.first().get_attendance_summary if attendances.exists() else {'present': 0, 'absent': 0, 'total': 0}
            return Response({
                'success': True,
                'data': serializer.data,
                'summary': {
                    'present_count': summary['present'],
                    'absent_count': summary['absent'],
                    'total_count': summary['total']
                }
            }, status=status.HTTP_200_OK)
        except Joinclub.DoesNotExist:
            return Response({'success': False, 'message': '–ó–∞–ø–∏—Å—å Joinclub –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=status.HTTP_404_NOT_FOUND)