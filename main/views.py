from django.db.models import Avg, Count
from rest_framework import viewsets, status
from rest_framework.permissions import IsAuthenticatedOrReadOnly, AllowAny
from rest_framework.response import Response
from rest_framework.decorators import action
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import filters

from .models import Hall, Club, Review
from .serializers import (
    HallSerializer, ClubSerializer, ReviewSerializer,
    HallDetailSerializer, ClubDetailSerializer
)
from .permissions import IsAuthorOrReadOnly


class HallViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Hall.objects.all().annotate(
        average_rating=Avg('reviews__rating'),
        review_count=Count('reviews')
    )
    permission_classes = [AllowAny]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['hall_type', 'coating', 'dressing_room', 'shower', 'lighting']
    search_fields = ['name', 'address', 'inventory']

    def get_serializer_class(self):
        if self.action == 'retrieve':
            return HallDetailSerializer
        return HallSerializer

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≤',
        operation_description='–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞.',
        manual_parameters=[
            openapi.Parameter('hall_type', openapi.IN_QUERY, type=openapi.TYPE_STRING, description='–¢–∏–ø –∑–∞–ª–∞ (indoor, outdoor, mixed)'),
            openapi.Parameter('coating', openapi.IN_QUERY, type=openapi.TYPE_STRING, description='–ü–æ–∫—Ä—ã—Ç–∏–µ'),
            openapi.Parameter('dressing_room', openapi.IN_QUERY, type=openapi.TYPE_BOOLEAN, description='–ù–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏'),
            openapi.Parameter('shower', openapi.IN_QUERY, type=openapi.TYPE_BOOLEAN, description='–ù–∞–ª–∏—á–∏–µ –¥—É—à–∞'),
            openapi.Parameter('lighting', openapi.IN_QUERY, type=openapi.TYPE_BOOLEAN, description='–ù–∞–ª–∏—á–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è'),
            openapi.Parameter('search', openapi.IN_QUERY, type=openapi.TYPE_STRING, description='–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–¥—Ä–µ—Å—É, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é')
        ]
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ª–∞',
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèüÔ∏è –ó–∞–ª—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∑–∞–ª–∞',
    )
    @action(detail=True, methods=['get'])
    def reviews(self, request, pk=None):
        hall = self.get_object()
        reviews = hall.reviews.all()
        serializer = ReviewSerializer(reviews, many=True)
        return Response(serializer.data)


class ClubViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Club.objects.all().annotate(
        average_rating=Avg('reviews__rating'),
        review_count=Count('reviews')
    )
    permission_classes = [AllowAny]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['hall']
    search_fields = ['name', 'description', 'coach']

    def get_serializer_class(self):
        if self.action == 'retrieve':
            return ClubDetailSerializer
        return ClubSerializer

    @swagger_auto_schema(
        tags=['üèÄ–ö–ª—É–±—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤',
        operation_description='–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –∫–ª—É–±–æ–≤. –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ `hall_id` –∏ –∏—Å–∫–∞—Ç—å –ø–æ `name`, `description`, `coach`.',
        manual_parameters=[
            openapi.Parameter('hall', openapi.IN_QUERY, type=openapi.TYPE_INTEGER, description='ID –∑–∞–ª–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª—É–±'),
            openapi.Parameter('search', openapi.IN_QUERY, type=openapi.TYPE_STRING, description='–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é, —Ç—Ä–µ–Ω–µ—Ä—É')
        ]
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèÄ–ö–ª—É–±—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–ª—É–±–∞',
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üèÄ–ö–ª—É–±—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∫–ª—É–±–∞',
    )
    @action(detail=True, methods=['get'])
    def reviews(self, request, pk=None):
        club = self.get_object()
        reviews = club.reviews.all()
        serializer = ReviewSerializer(reviews, many=True)
        return Response(serializer.data)


class ReviewViewSet(viewsets.ModelViewSet):
    serializer_class = ReviewSerializer
    permission_classes = [IsAuthenticatedOrReadOnly, IsAuthorOrReadOnly]

    def get_queryset(self):
        queryset = Review.objects.all()
        hall_id = self.request.query_params.get('hall_id')
        club_id = self.request.query_params.get('club_id')

        if hall_id:
            queryset = queryset.filter(hall_id=hall_id)
        if club_id:
            queryset = queryset.filter(club_id=club_id)

        return queryset

    @swagger_auto_schema(
        tags=['üìù –û—Ç–∑—ã–≤—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤',
        manual_parameters=[
            openapi.Parameter('hall_id', openapi.IN_QUERY, type=openapi.TYPE_INTEGER,
                              description='ID –∑–∞–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤'),
            openapi.Parameter('club_id', openapi.IN_QUERY, type=openapi.TYPE_INTEGER,
                              description='ID –∫–ª—É–±–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤')
        ],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üìù –û—Ç–∑—ã–≤—ã'],
        operation_summary='–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤',
    )
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üìù –û—Ç–∑—ã–≤—ã'],
        operation_summary='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞',
    )
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üìù –û—Ç–∑—ã–≤—ã'],
        operation_summary='–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (PUT)',
    )
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üìù –û—Ç–∑—ã–≤—ã'],
        operation_summary='–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (PATCH)',
    )
    def partial_update(self, request, *args, **kwargs):
        return super().partial_update(request, *args, **kwargs)

    @swagger_auto_schema(
        tags=['üìù –û—Ç–∑—ã–≤—ã'],
        operation_summary='–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤',
    )
    def destroy(self, request, *args, **kwargs):
        return super().destroy(request, *args, **kwargs)

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)